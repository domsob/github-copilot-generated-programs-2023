Synthesizing 9/10 solutions (Duplicates hidden)

=======
Suggestion 1

def myfunc(str1: str):
    length = len(str1)
    if length % 2 == 0:
        return str1[int(length/2-1):int(length/2+1)]
    else:
        return str1[int(length/2)]

=======
Suggestion 2

def myfunc(str1: str):
    """
    >>> myfunc('testing')
    't'
    >>> myfunc('test')
    'es'
    """
    if len(str1) % 2 == 0:
        return str1[int(len(str1)/2)-1:int(len(str1)/2)+1]
    else:
        return str1[int(len(str1)/2)]

=======
Suggestion 3

def myfunc(str1: str):
    if len(str1) % 2 == 0:
        return str1[int(len(str1)/2)-1:int(len(str1)/2)+1]
    else:
        return str1[int(len(str1)/2)]

=======
Suggestion 4

def myfunc(str1: str):
    if len(str1) % 2 == 0:
        return str1[len(str1) // 2 - 1 : len(str1) // 2 + 1]
    else:
        return str1[len(str1) // 2]

=======
Suggestion 5

def myfunc(str1: str):
    str_len = len(str1)
    if str_len % 2 == 1:
        return str1[str_len // 2]
    else:
        return str1[str_len // 2 - 1 : str_len // 2 + 1]

=======
Suggestion 6

def myfunc(str1: str):
    if len(str1) % 2 == 0:
        return str1[int(len(str1)/2 - 1):int(len(str1)/2 + 1)]
    else:
        return str1[int(len(str1)/2)]

=======
Suggestion 7

def myfunc(str1: str):
    if len(str1) % 2 == 0:
        return str1[int(len(str1)/2)-1] + str1[int(len(str1)/2)]
    else:
        return str1[int(len(str1)/2)]
