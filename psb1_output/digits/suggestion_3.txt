Synthesizing 10/10 solutions

=======
Suggestion 1

def myfunc(int1: int):
    if int1 < 0:
        int1 = int1 * -1
        int1 = str(int1)
        int1 = int1[::-1]
        int1 = "-" + int1
    else:
        int1 = str(int1)
        int1 = int1[::-1]
    return int1

=======
Suggestion 2

def myfunc(int1: int):
    # convert int to string
    str1 = str(int1)
    # reverse string
    str2 = str1[::-1]
    # convert string to list
    lst1 = list(str2)
    # convert list to int
    int2 = int(''.join(lst1))
    # return int
    return int2

=======
Suggestion 3

def myfunc(int1: int):
    if int1 < 0:
        int1 = -int1
        return list(map(int, str(int1)[::-1])) + ['-',]
    else:
        return list(map(int, str(int1)[::-1]))

=======
Suggestion 4

def myfunc(int1: int):
    # your code here
    pass

=======
Suggestion 5

def myfunc(int1: int):
    int1 = abs(int1)
    int1 = str(int1)
    int1 = list(int1)
    int1 = int1[::-1]
    int1 = [int(i) for i in int1]
    return int1

=======
Suggestion 6

def myfunc(int1: int):
    return [int(x) for x in str(int1)][::-1] if int1 >= 0 else [int(x) for x in str(int1)][::-1][:-1]

=======
Suggestion 7

def myfunc(int1: int):
    if int1 < 0:
        int1 = -int1
        return [-int(x) for x in str(int1)[::-1]]
    else:
        return [int(x) for x in str(int1)[::-1]]

=======
Suggestion 8

def myfunc(int1: int):
    # Write your code here
    pass

=======
Suggestion 9

def myfunc(int1: int):
    if int1 == 0:
        return [0]
    if int1 < 0:
        sign = -1
        int1 = -int1
    else:
        sign = 1
    result = []
    while int1 > 0:
        result.append(int1 % 10)
        int1 = int1 // 10
    return [sign * x for x in result[::-1]]

=======
Suggestion 10

def myfunc(int1: int):
    if int1 < 0:
        int1 = int1 * -1
        return [int(i) for i in str(int1)][::-1] * -1
    else:
        return [int(i) for i in str(int1)][::-1]
